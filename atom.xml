<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cytb6f</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gessiegulugulu.github.io/"/>
  <updated>2019-10-30T17:01:23.292Z</updated>
  <id>https://gessiegulugulu.github.io/</id>
  
  <author>
    <name>JMZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>arm处理器手册学习笔记</title>
    <link href="https://gessiegulugulu.github.io/2019/10/30/arm%E5%A4%84%E7%90%86%E5%99%A8%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/</id>
    <published>2019-10-30T08:18:39.000Z</published>
    <updated>2019-10-30T17:01:23.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ARM处理器手册学习笔记"><a href="#ARM处理器手册学习笔记" class="headerlink" title="ARM处理器手册学习笔记"></a>ARM处理器手册学习笔记</h1><p><strong>ARM9EJ-S Revision:r1p2  Technical Reference Manual</strong> </p><p>参考<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0222b/I29827.html" target="_blank" rel="noopener">官方手册</a></p><a id="more"></a><h2 id="一、编程模型"><a href="#一、编程模型" class="headerlink" title="一、编程模型"></a>一、编程模型</h2><h3 id="1-处理器的操作状态"><a href="#1-处理器的操作状态" class="headerlink" title="1.  处理器的操作状态"></a>1.  处理器的操作状态</h3><p>三种状态：</p><ul><li>ARM state: 32位</li><li>Thumb state： 16位</li><li>Jazelle state：可变长度</li></ul><p>转化：</p><ul><li>三种状态之间可以相互切换</li><li>ARM state 和Thumb交互：允许ARM和Thumb代码混合。</li></ul><h3 id="2-内存格式"><a href="#2-内存格式" class="headerlink" title="2.  内存格式"></a>2.  内存格式</h3><p>内存：有编号的升序线性字节集合</p><p>处理内存单元的两种格式：Big-endian format; Little-endian format</p><ul><li><p>Big-endian format（大端格式）</p><p>字的最高字节存在编号最低的地址中。</p><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030194231422.png" alt></p><p>用学习组成原理时书上的图表示更加清晰：</p><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030194811219.png" alt></p></li><li><p>Little-endian format（小端格式）</p><p>字的最低字节存在编号最低的地址中。</p><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030194306129.png" alt></p><p>同样组成原理时书上的图：</p><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030195840112.png" alt="image-20191030195840112"></p></li></ul><h3 id="3-指令长度"><a href="#3-指令长度" class="headerlink" title="3.  指令长度"></a>3.  指令长度</h3><ul><li>32bits — ARM state</li><li>16bits — Thumb state</li><li>8的倍数即可，可变长度 — Jazzlle state</li></ul><h3 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4.  数据类型"></a>4.  数据类型</h3><ul><li>字节 32位</li><li>半字 16位（半字必须于 2 字节边界对齐）</li><li>字     8位（字必须于 4 字节边界对齐）</li></ul><h3 id="5-工作模式"><a href="#5-工作模式" class="headerlink" title="5. 工作模式"></a>5. 工作模式</h3><p>共有7种工作模式</p><table><thead><tr><th align="center">分类</th><th align="center">处理器工作模式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">用户模式</td><td align="center">用户模式User</td><td align="center">正常程序执行模式</td></tr><tr><td align="center">特权模式</td><td align="center">快速中断模式FIQ</td><td align="center">高优先级中断产生时</td></tr><tr><td align="center">特权模式</td><td align="center">外部中断模式IRQ</td><td align="center">低优先级中断时</td></tr><tr><td align="center">特权模式</td><td align="center">特权模式Supervisor</td><td align="center">一种保护模式</td></tr><tr><td align="center">特权模式</td><td align="center">数据访问模式Abort</td><td align="center">数据或指令预取中止</td></tr><tr><td align="center">特权模式</td><td align="center">未定义指令中止模式Undefined</td><td align="center">执行未定义指令时</td></tr><tr><td align="center">特权模式</td><td align="center">系统模式System</td><td align="center">特权级操作系统</td></tr></tbody></table><p>用户模式以外的模式统称为<strong>特权模式</strong>。特权模式用于服务中断或异常，或访问受保护的资源。 </p><h3 id="6-寄存器"><a href="#6-寄存器" class="headerlink" title="6.  寄存器"></a>6.  寄存器</h3><p>ARM9EJ-S 含有37个寄存器（都为32位）</p><ul><li>31个32位通用寄存器</li><li>6个32位状态寄存器</li></ul><h4 id="6-1-ARM-state-下的寄存器集"><a href="#6-1-ARM-state-下的寄存器集" class="headerlink" title="6.1  ARM state 下的寄存器集"></a>6.1  ARM state 下的寄存器集</h4><p>这种状态下可以同时访问：16个通用寄存器 + 1或2个状态寄存器。</p><p>7种不同的模式下对应的可用寄存器不同。</p><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030202201953.png" alt></p><p>关于附加寄存器：CPSR：当前程序状态寄存器（condition code flags*&lt;?&gt;*+当前模式位）</p><h4 id="6-2-Thumb-state-下的寄存器集"><a href="#6-2-Thumb-state-下的寄存器集" class="headerlink" title="6.2  Thumb state 下的寄存器集"></a>6.2  Thumb state 下的寄存器集</h4><p>这种状态下可以同时访问：8个通用寄存器 ；PC(计数器)；堆栈指针；LR(link register–r14)；CPSR</p><p>7种不同模式下的对应寄存器：</p><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030202739922.png" alt></p><h4 id="6-3-两种状态下寄存器的关系"><a href="#6-3-两种状态下寄存器的关系" class="headerlink" title="6.3 两种状态下寄存器的关系"></a>6.3 两种状态下寄存器的关系</h4><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030202838677.png" alt></p><p>其中，r0-r7为低寄存器，r8-r15为高寄存器。</p><h3 id="7-程序状态寄存器CPSR"><a href="#7-程序状态寄存器CPSR" class="headerlink" title="7. 程序状态寄存器CPSR"></a>7. 程序状态寄存器CPSR</h3><p>含一个CPSR和5个SPSR（保存CPSR的寄存器）。</p><p>CPSR的作用：</p><ul><li>保存最近执行的ALU操作的信息 </li><li>控制中断的启用和禁用 </li><li>设置处理器工作模式。 </li></ul><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030203524548.png" alt></p><h4 id="7-1-条件标志位（N-Z-C-V）"><a href="#7-1-条件标志位（N-Z-C-V）" class="headerlink" title="7.1 条件标志位（N Z C V）"></a>7.1 条件标志位（N Z C V）</h4><p>这些条件标志位会根据程序中的算术或逻辑指令的执行结果进行修改，而且这些条件标志位可由大多数指令检测，以决定指令是否执行。 </p><h4 id="7-2-Q标志位"><a href="#7-2-Q标志位" class="headerlink" title="7.2 Q标志位"></a>7.2 Q标志位</h4><ul><li>可以由某些乘法或小数运算来设置：QADD; QDQDD; QSUB; QDSUB; SMLAxy; SMLAWy</li><li>sticky特性： 当由一条指令设置时，它将保持设置，直到MSR指令明确地清除它并写入CPSR。 &lt;？？有点困惑&gt;</li></ul><h4 id="7-3-J标志位"><a href="#7-3-J标志位" class="headerlink" title="7.3 J标志位"></a>7.3 J标志位</h4><p> CPSR中的J位表示何时处于Jazelle state。 </p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030204216848.png" style="zoom:67%;"><h4 id="7-4-控制位"><a href="#7-4-控制位" class="headerlink" title="7.4 控制位"></a>7.4 控制位</h4><p>CPSR 的低8位统称为控制位。 当异常发生时，控制位会改变。当处理器在特权模式下运行时，软件可以操作这些位。 </p><ul><li>中断禁止位：</li></ul><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030204425050.png" style="zoom:67%;"><ul><li>T位（表示运行状态）：T=0表示ARM state; T=1表示Thumb state</li><li>模式控制位M[4：0]：这些位的组合确定了处理器处于哪种状态</li></ul><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030204656278.png" alt="image-20191030204656278" style="zoom:67%;"><h4 id="7-5-保留位"><a href="#7-5-保留位" class="headerlink" title="7.5 保留位"></a>7.5 保留位</h4><p>将来处理器可能会使用。</p><h3 id="8-异常"><a href="#8-异常" class="headerlink" title="8. 异常"></a>8. 异常</h3><ul><li>种类</li></ul><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030205556487.png" alt></p><ul><li><p>Reset复位异常：系统上电、系统复位</p></li><li><p>SWI软中断：软中断异常发生时，处理器进入特权模式，执行一些特权模式下的操作系统功能。</p></li><li><p>UNDEF未定义指令异常：当处理器执行协处理器指令时，它必须等待一个外部协处理器应答后，才能真正执行这条指令。若协处理器没有相应，则发生未定义指令异常。 &lt;??协处理器！！！&gt;</p></li><li><p>PABT预取指令异常：当处理器试图去取一条被标记为预取无效的指令时，发生预取异常。</p></li><li><p>IRQ外部中断：当处理器的外部中断请求引脚有效，而且 CPSR 寄存器的 I 控制位被清除时，处理器产生外部中断 IRQ 异常。</p></li><li><p>FIQ快速中断：当处理器的快速中断请求引脚有效且 CPSR 寄存器的 F 控制位被清除时，处理器产生快速中断请求 FIQ 异常。 </p></li><li><p>DABT数据访问中止异常：当数据访问指令的目标地址不存在或者该地址不允许当前指令访问时，处理器产生数据访问中止异常。 </p></li><li><p>BKPT断点指令：类似PABT</p></li></ul><h2 id="二、中断"><a href="#二、中断" class="headerlink" title="二、中断"></a>二、中断</h2><p>ARM9EJ-S提供了两级，固定优先级的异步硬件中断方案。 </p><ul><li>FIQ 提供了对快速中断的支持 </li><li>IRQ 提供对正常优先级中断的支持 </li></ul><h3 id="1-硬件中断"><a href="#1-硬件中断" class="headerlink" title="1. 硬件中断"></a>1. 硬件中断</h3><h4 id="1-1-生成一个中断"><a href="#1-1-生成一个中断" class="headerlink" title="1.1 生成一个中断"></a>1.1 生成一个中断</h4><p>通过nFIQ或nIRQ输入断言产生FIQ或IQR异常。中断必须保持断言状态，直到内核向中断源确认中断已经发生。</p><h4 id="1-2-同步"><a href="#1-2-同步" class="headerlink" title="1.2 同步"></a>1.2 同步</h4><p> nFIQ和nIRQ是同步输入到ARM内核上</p><ul><li>在内核时钟上设置并保持上升曲线</li><li>弱系统出现与内核时钟异步的中断事件，则需要内核外的同步寄存器</li></ul><h4 id="1-3-在中断异常后重启中断"><a href="#1-3-在中断异常后重启中断" class="headerlink" title="1.3 在中断异常后重启中断"></a>1.3 在中断异常后重启中断</h4><ul><li>在重启中断的时候需要确保删除了中断的原始源。</li><li>删除时要考虑内核<strong>流水线特征</strong>和<strong>内存系统</strong></li></ul><h4 id="1-4-中断寄存器"><a href="#1-4-中断寄存器" class="headerlink" title="1.4 中断寄存器"></a>1.4 中断寄存器</h4><ul><li>寄存器不受CLKEN限制，在时钟之外自愈运行</li><li>内核在等待时，也可以准备中断入口</li></ul><h3 id="2-最大中断延迟"><a href="#2-最大中断延迟" class="headerlink" title="2. 最大中断延迟"></a>2. 最大中断延迟</h3><p>可能导致中断的情况：</p><ul><li><p>每当一条新指令计划进入管道的执行阶段时。</p></li><li><p>每当新指令处于执行阶段的第一个执行周期时。</p></li><li><p>当一个协处理器指令在执行阶段被繁忙等待时。</p></li><li><p>当一个在执行阶段被联锁的新指令已经进展到它的第一个活动执行周期时。</p><p>最坏情况下的中断延迟发生在最长的LDM指令导致数据中止时 。</p></li></ul><h3 id="3-最小中断延迟"><a href="#3-最小中断延迟" class="headerlink" title="3. 最小中断延迟"></a>3. 最小中断延迟</h3><p>FIQ或IRQ的最小延迟是输入寄存器能够对请求进行采样的最短时间(一个周期)，加上异常输入时间(三个周期)。在中断被断言后，第一个中断指令进入执行管道阶段四个周期。 </p><h2 id="三、协同处理器"><a href="#三、协同处理器" class="headerlink" title="三、协同处理器"></a>三、协同处理器</h2><p> 协处理器使用协处理器中的pipeline follower&lt;流水线跟踪器？？&gt;来确定它们必须执行的指令。当每条指令从内存到达时，它同时进入ARM pipeline和协处理器pipeline 。 协同处理器决定指令何时被arm内核取到，以便可以将该指令加载到协处理器中，并且使pipeline follower前进。</p><h3 id="1-LDC-与-STC"><a href="#1-LDC-与-STC" class="headerlink" title="1. LDC 与 STC"></a>1. LDC 与 STC</h3><p>所传输的字的数量取决于协处理器如何驱动CHSD[1:0]和CHSE[1:0]总线。&lt;这部分英文官方手册看不太懂，参考了中文手册<a href="https://events.csdn.net/ARM.pdf" target="_blank" rel="noopener">《ARM 系列处理器应用技术完全手册》</a>&gt;</p><p>下图是LDC or STC 传输4个数据的循环计时：</p><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030214326181.png" alt></p><ul><li><p>LDC</p><p>LDC（Load Coprocessor）指令通过一定的寻址模式从一系列连续的内存单元将数据读取到协处理器的寄存器中。如果协处理器不能成功地执行操作，将产生未定义的指令异常中断。 </p><p>编码格式：</p><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030213732929.png" alt></p></li><li><p>STC</p><p>STC（Store Coprocessor）指令通过一定的寻址模式将协处理器寄存器中的数据存储到一系列连续的内存单元中。如果协处理器不能成功地执行操作，将产生未定义的指令异常中断。 </p><p>编码格式：</p><p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030213827860.png" alt></p></li></ul><h3 id="2-MCR与MRC"><a href="#2-MCR与MRC" class="headerlink" title="2. MCR与MRC"></a>2. MCR与MRC</h3><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030214506767.png" style="zoom: 80%;"><p>首先，PADV is driven HIGH，表示INSTR[31:0]上的指令正在进入管道的解码阶段，协处理器解码新指令，并按要求驱动CHSD[1:0]。 </p><p>在下一个循环中，PADV is driven HIGH，表示指令现在已经被发送到执行阶段。如果条件代码通过，并且指令将被执行，那么PASS signal is driven HIGH，并且CHSD[1:0]握手总线将被检查(其他情况下忽略)。 </p><p>对于任何连续的执行周期，都要检查CHSE[1:0]握手总线。当观察到最后一个条件时，指令进入最后的执行周期。 </p><p>MCR的情况下，WDATA[31:0]总线寄存器数据。MRC的情况下，RDATA[31:0]总线在内存阶段结束采样&lt;？？？&gt;， 在下一个周期中写入目标寄存器。 </p><h3 id="3-MCRR与MRRC"><a href="#3-MCRR与MRRC" class="headerlink" title="3. MCRR与MRRC"></a>3. MCRR与MRRC</h3><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030215547766.png" style="zoom:80%;"><p>MCRR的情况下，WDATA[31:0]总线在第二个执行周期中使用第一个寄存器数据。MRRC的情况下，RDATA[31:0]总线在第二个执行周期结束和第一个执行中期时采样&lt;？？？&gt;， 在下一个周期中写入目标寄存器。 </p><h3 id="4-连锁MCR"><a href="#4-连锁MCR" class="headerlink" title="4. 连锁MCR"></a>4. 连锁MCR</h3><p> CHSD必须在第二个周期中返回它的值(不连锁)。 </p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030215230136.png" style="zoom: 67%;"><h3 id="5-连锁MCRR"><a href="#5-连锁MCRR" class="headerlink" title="5. 连锁MCRR"></a>5. 连锁MCRR</h3><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030215729021.png" alt="image-20191030215729021" style="zoom: 67%;"><h3 id="6-CDP"><a href="#6-CDP" class="headerlink" title="6.CDP"></a>6.CDP</h3><p> CDP指令通常在一个循环中执行。当指令进入译码阶段时，PADV is driven HIGH to signal，当指令到达流水线的执行阶段时，PADV再次被驱动。</p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030220021485.png" alt="image-20191030220021485" style="zoom:80%;"> <h3 id="7-特权指令"><a href="#7-特权指令" class="headerlink" title="7. 特权指令"></a>7. 特权指令</h3><p>协处理器可能会限制某些指令只在特权模式下使用。所以协处理器必须跟踪内部的输出。 </p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030220159701.png" alt="image-20191030220159701" style="zoom: 67%;"><h3 id="8-自旋-Busy-waiting-和中断"><a href="#8-自旋-Busy-waiting-和中断" class="headerlink" title="8. 自旋(Busy-waiting)和中断"></a>8. 自旋(Busy-waiting)和中断</h3><p>在执行协处理器指令期间，协处理器仍然忙于执行前面的协处理器指令，则允许协处理器暂停或繁忙等待。为此，与解码阶段指令驱动器相关联的协处理器将等待到CHSD[1:0]。当相关的指令进入流水线的执行阶段时，协处理器可以将Wait驱动到CHSE[1:0]上，并根据需要进行尽可能多的循环，以将该指令保持在繁忙等待循环中。 </p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030221123204.png" alt="image-20191030221123204" style="zoom:67%;"><h3 id="9-协处理器15MCRs"><a href="#9-协处理器15MCRs" class="headerlink" title="9. 协处理器15MCRs"></a>9. 协处理器15MCRs</h3><p>对于协处理器响应Go握手信号的每个周期，协处理器数据被驱动到IA和DA上如图所示。</p><img src="//gessiegulugulu.github.io/2019/10/30/arm处理器手册学习笔记/image-20191030221301355.png" alt="image-20191030221301355" style="zoom:67%;"><h3 id="11-连接协处理器"><a href="#11-连接协处理器" class="headerlink" title="11. 连接协处理器"></a>11. 连接协处理器</h3><p>协处理器必须具有32位的连接：</p><ul><li>内存数据</li><li>从内核写入数据</li><li>从内核读数据</li></ul><p>&lt;//TODO ？？后面的完全迷惑，中文手册里面没有对应部分！&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ARM处理器手册学习笔记&quot;&gt;&lt;a href=&quot;#ARM处理器手册学习笔记&quot; class=&quot;headerlink&quot; title=&quot;ARM处理器手册学习笔记&quot;&gt;&lt;/a&gt;ARM处理器手册学习笔记&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;ARM9EJ-S Revision:r1p2  Technical Reference Manual&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;参考&lt;a href=&quot;http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0222b/I29827.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方手册&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="arm处理器" scheme="https://gessiegulugulu.github.io/tags/arm%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://gessiegulugulu.github.io/2019/10/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://gessiegulugulu.github.io/2019/10/23/设计模式/</id>
    <published>2019-10-23T08:37:51.000Z</published>
    <updated>2019-10-30T17:15:34.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><a id="more"></a><p> <img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_class_struct.jpg" alt> </p><ul><li>车的类图结构为&lt;<abstract>&gt;，表示车是一个<strong>抽象类</strong>；</abstract></li><li>它有两个<strong>继承类</strong>：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；</li><li>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；</li><li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；</li><li>学生与班级之间是聚合关系，使用带空心箭头的实线表示；</li><li>学生与身份证之间为关联关系，使用一根实线表示；</li><li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</li></ul><h3 id="Factory-Method-Pattern-工厂方法模式"><a href="#Factory-Method-Pattern-工厂方法模式" class="headerlink" title="Factory Method Pattern 工厂方法模式"></a>Factory Method Pattern 工厂方法模式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li><p>工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式 </p></li><li><p>角色</p><p> <img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/FactoryMethod.jpg" alt> </p><ul><li>Product：抽象产品</li><li>ConcreteProduct：具体产品</li><li>Factory：抽象工厂–定义创建产品对象的公共接口</li><li>ConcreteFactory：具体工厂–生成具体的产品对象</li></ul></li></ol><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>日志记录器</p><p>某系统日志记录器要求支持多种日志记录方式，如文件记录、数据库记录等，且用户可以根据要求动态选择日志记录方式， 现使用工厂方法模式设计该系统。</p><p> <img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/loger.jpg" alt="../_images/loger.jpg"> </p><h4 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h4><ul><li>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。</li><li>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li><li>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</li></ul><h3 id="Mediator-Pattern-中介者模式"><a href="#Mediator-Pattern-中介者模式" class="headerlink" title="Mediator Pattern 中介者模式"></a>Mediator Pattern 中介者模式</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li><p>中间类来协调这些类/对象之间的复杂关系，以降低系统的耦合度。 </p></li><li><p>角色：</p><ul><li><p>Mediator: 抽象中介者</p></li><li><p>ConcreteMediator: 具体中介者</p></li><li><p>Colleague: 抽象同事类</p></li><li><p>ConcreteColleague: 具体同事类</p><p> <img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/Mediator.jpg" alt> </p><p> <img src="https://img-blog.csdn.net/20170413103952341?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcTU0NzU1MDgzMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p></li></ul></li><li><p>参考网站：</p><p> <a href="https://www.cnblogs.com/edisonchou/p/7497234.html" target="_blank" rel="noopener">https://www.cnblogs.com/edisonchou/p/7497234.html</a> </p><p> <a href="https://blog.csdn.net/q547550831/article/details/70155171" target="_blank" rel="noopener">https://blog.csdn.net/q547550831/article/details/70155171</a> </p></li></ul><h3 id="Interpreter"><a href="#Interpreter" class="headerlink" title="Interpreter"></a>Interpreter</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;UML类图&quot;&gt;&lt;a href=&quot;#UML类图&quot; class=&quot;headerlink&quot; title=&quot;UML类图&quot;&gt;&lt;/a&gt;UML类图&lt;/h3&gt;
    
    </summary>
    
    
      <category term="软件开发设计" scheme="https://gessiegulugulu.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="https://gessiegulugulu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Cordova打包构建好的vue项目方法</title>
    <link href="https://gessiegulugulu.github.io/2019/10/14/Cordova%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%A5%BD%E7%9A%84vue%E9%A1%B9%E7%9B%AE/"/>
    <id>https://gessiegulugulu.github.io/2019/10/14/Cordova打包构建好的vue项目/</id>
    <published>2019-10-14T00:10:15.000Z</published>
    <updated>2019-10-15T06:28:49.868Z</updated>
    
    <content type="html"><![CDATA[<p>假设已经存在构建好的vue项目，用Cordova将其打包在Android平台上的方法。</p><a id="more"></a><h4 id="搭建Cordova环境和Android环境"><a href="#搭建Cordova环境和Android环境" class="headerlink" title="搭建Cordova环境和Android环境"></a>搭建Cordova环境和Android环境</h4><ol><li><p>在vue项目文件同级目录下新建Cordova项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova creat cordova-app com.test.cordova myApp</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>第一个参数 <strong>cordova-app</strong> 为工程的文件夹名</li><li>第二个参数（可选）<strong>com.test.cordova</strong> 为应用程序的id名，可以在 <strong>config.xml</strong> 中修改，如果不指定的话默认<strong>io.cordova.hellocordova</strong></li><li>第三个参数（可选）<strong>myApp</strong>为App显示的名称，也可在 <strong>config.xml</strong> 中修改 </li></ul></li><li><p>添加Android平台支持</p><p>进入工程目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd cordova-app</span><br></pre></td></tr></table></figure><p>添加Android平台文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova platform add android</span><br></pre></td></tr></table></figure></li></ol><h4 id="修改vue项目"><a href="#修改vue项目" class="headerlink" title="修改vue项目"></a>修改vue项目</h4><ol><li><p>修改 <strong>config/index.js</strong> 文件中 <strong>build</strong> 属性节点下的 <strong>index</strong>、<strong>assetsRoot</strong> 属性，将它们改成 <strong>Cordova</strong> 项目下的 <strong>www</strong> 文件夹（注意是 <strong>build</strong> 下 的 <strong>index</strong>、<strong>assetsRoot</strong> 属性，不要改成 <strong>dev</strong> 下的了） </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">build: </span><br><span class="line">&#123; ...</span><br><span class="line">  <span class="comment">//将文件直接编译到 cordova 项目下面</span></span><br><span class="line">  index:path.resolve(__dirname,<span class="string">'../../cordova_project/www/index.html'</span>),</span><br><span class="line">  assetsRoot:path.resolve(__dirname,<span class="string">'../../cordova_project/www'</span>),</span><br><span class="line">  assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">  assetsPublicPath: <span class="string">''</span>,  <span class="comment">//原来是 '/'</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<strong>index.html</strong>, 加入cordova.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hangge.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">cordova.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<strong>src/main.js</strong>： 将 <strong>new Vue()</strong> 代码放到 <strong>deviceready</strong> 回调里面。（在使用 <strong>pc</strong> 开发调试时可以先把外层的这个监听给注释掉，等到要打包成 <strong>app</strong> 时再放开。） </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'deviceready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      store,</span><br><span class="line">      router,</span><br><span class="line">      components: &#123; App &#125;,</span><br><span class="line">      template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="编译vue项目"><a href="#编译vue项目" class="headerlink" title="编译vue项目"></a>编译vue项目</h4><p>在vue工程路径下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>即可编译到cordova/www下</p><h4 id="编译Cordova工程"><a href="#编译Cordova工程" class="headerlink" title="编译Cordova工程"></a>编译Cordova工程</h4><p>编辑完cordova/www文件后，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build</span><br></pre></td></tr></table></figure><p>即可编译Cordova工程，此时在Android studio中运行即可在虚拟机上看到app界面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设已经存在构建好的vue项目，用Cordova将其打包在Android平台上的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android开发" scheme="https://gessiegulugulu.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="https://gessiegulugulu.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Chapter4 常用的实时调度方法</title>
    <link href="https://gessiegulugulu.github.io/2019/10/13/Chapter4-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AE%9E%E6%97%B6%E8%B0%83%E5%BA%A6%E6%96%B9%E6%B3%95/"/>
    <id>https://gessiegulugulu.github.io/2019/10/13/Chapter4-常用的实时调度方法/</id>
    <published>2019-10-12T16:38:57.000Z</published>
    <updated>2019-10-13T15:10:27.812Z</updated>
    
    <content type="html"><![CDATA[<p> 《实时系统》笔记：第四章 常用的实时调度方法</p><a id="more"></a><h3 id="时钟驱动调度方法"><a href="#时钟驱动调度方法" class="headerlink" title="时钟驱动调度方法"></a>时钟驱动调度方法</h3><h3 id="加权的轮转调度方法"><a href="#加权的轮转调度方法" class="headerlink" title="加权的轮转调度方法"></a>加权的轮转调度方法</h3><h3 id="优先级驱动方法"><a href="#优先级驱动方法" class="headerlink" title="优先级驱动方法"></a>优先级驱动方法</h3><h3 id="动态系统与静态系统"><a href="#动态系统与静态系统" class="headerlink" title="动态系统与静态系统"></a>动态系统与静态系统</h3><h3 id="有效释放时间与时限"><a href="#有效释放时间与时限" class="headerlink" title="有效释放时间与时限"></a>有效释放时间与时限</h3><h3 id="EDF和LST算法的最优性"><a href="#EDF和LST算法的最优性" class="headerlink" title="EDF和LST算法的最优性"></a>EDF和LST算法的最优性</h3><h3 id="EDF和LST算法的非最优性"><a href="#EDF和LST算法的非最优性" class="headerlink" title="EDF和LST算法的非最优性"></a>EDF和LST算法的非最优性</h3><h3 id="优先级驱动系统中验证定时约束的困难"><a href="#优先级驱动系统中验证定时约束的困难" class="headerlink" title="优先级驱动系统中验证定时约束的困难"></a>优先级驱动系统中验证定时约束的困难</h3><h3 id="脱机调度与联机调度"><a href="#脱机调度与联机调度" class="headerlink" title="脱机调度与联机调度"></a>脱机调度与联机调度</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 《实时系统》笔记：第四章 常用的实时调度方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="实时系统" scheme="https://gessiegulugulu.github.io/tags/%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Chapter3 实时系统参考模型</title>
    <link href="https://gessiegulugulu.github.io/2019/10/13/Chapter3-%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/"/>
    <id>https://gessiegulugulu.github.io/2019/10/13/Chapter3-实时系统参考模型/</id>
    <published>2019-10-12T16:34:18.000Z</published>
    <updated>2019-10-15T07:38:13.248Z</updated>
    
    <content type="html"><![CDATA[<p> 《实时系统》笔记：第三章 实时系统参考模型</p><a id="more"></a><p>每个系统都由三个因素表征：</p><ul><li>工作/负载模型：描述系统支持的应用</li><li>资源模型：描述使用于应用的系统资源</li><li>算法：如何使用资源</li></ul><h3 id="处理器和资源"><a href="#处理器和资源" class="headerlink" title="处理器和资源"></a>处理器和资源</h3><ul><li><p>系统资源分类：<strong>处理器</strong>（服务器/活动资源）和<strong>资源</strong></p></li><li><p><strong>处理器（P<sub>i</sub>）</strong>分类：</p><ul><li><p>同一类型的处理器：功能一样且可以交换使用</p></li><li><p>两个传输链路在一对<u>发送器和接收器</u>之间的传输速率相同，则它们的处理器类型相同。</p></li><li><p>对称多处理器(SMP)系统中的处理器是同一类型</p></li><li><p>关注点为作业时无需考虑处理器类型</p></li></ul></li><li><p><strong>资源（R）</strong>：</p><ul><li><p>专指被动<strong>资源</strong></p></li><li><p>困惑？？</p><p><img src="//gessiegulugulu.github.io/2019/10/13/Chapter3-实时系统参考模型/D:@Others%5Cpassage%5Cblog%5Csource_posts%5CChapter3-%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%5C1570978910913.png" alt></p> <img src="/2019/10/13/Chapter3-实时系统参考模型/1570978910913.png"> </li><li><p>可重用资源：使用过程中不会被消耗</p></li><li><p>丰富的资源：没有作业会因为缺少这种资源而不能执行（如内存资源）</p></li></ul></li></ul><h3 id="实时系统工作负荷的时间参数"><a href="#实时系统工作负荷的时间参数" class="headerlink" title="实时系统工作负荷的时间参数"></a>实时系统工作负荷的时间参数</h3><h3 id="周期性任务模型"><a href="#周期性任务模型" class="headerlink" title="周期性任务模型"></a>周期性任务模型</h3><h3 id="优先约束和数据依赖"><a href="#优先约束和数据依赖" class="headerlink" title="优先约束和数据依赖"></a>优先约束和数据依赖</h3><h3 id="其他类型的依赖关系"><a href="#其他类型的依赖关系" class="headerlink" title="其他类型的依赖关系"></a>其他类型的依赖关系</h3><h3 id="功能参数"><a href="#功能参数" class="headerlink" title="功能参数"></a>功能参数</h3><h3 id="作业的资源参数以及资源的参数"><a href="#作业的资源参数以及资源的参数" class="headerlink" title="作业的资源参数以及资源的参数"></a>作业的资源参数以及资源的参数</h3><h3 id="调度等级"><a href="#调度等级" class="headerlink" title="调度等级"></a>调度等级</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 《实时系统》笔记：第三章 实时系统参考模型&lt;/p&gt;
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="实时系统" scheme="https://gessiegulugulu.github.io/tags/%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Chapter2 强实时系统与弱实时系统</title>
    <link href="https://gessiegulugulu.github.io/2019/10/12/%E5%BC%BA%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BC%B1%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://gessiegulugulu.github.io/2019/10/12/强实时系统与弱实时系统/</id>
    <published>2019-10-12T06:39:11.000Z</published>
    <updated>2019-10-12T16:34:40.710Z</updated>
    
    <content type="html"><![CDATA[<p>《实时系统》笔记：第二章 强实时系统与弱实时系统</p><a id="more"></a><h3 id="作业与处理器"><a href="#作业与处理器" class="headerlink" title="作业与处理器"></a>作业与处理器</h3><ul><li><p><strong>作业</strong>：能被系统调度和执行的<u>工作单元</u></p></li><li><p><strong>任务</strong>：共同提供某种系统功能的<u>一组相关作业</u></p></li><li><p><strong>处理器</strong>：(也称服务器 活动资源) 作业在执行的时候所占用的资源 (如: CPU 网络 磁盘)</p></li></ul><h3 id="释放时间、时限"><a href="#释放时间、时限" class="headerlink" title="释放时间、时限"></a>释放时间、时限</h3><p>作业的<u>释放时间</u>和<u>时限</u>将实时系统与非实时系统的作业区别开</p><ul><li><p><strong>释放时间</strong>：一个时刻。作业可以被调度和执行条件：</p><p>① 从该时刻开始及此后，</p><p>② 作业的数据和控制条件得到满足</p></li><li><p><strong>时限</strong>：一个时刻。此时刻前要求作业完成执行。“作业没有时限”</p></li><li><p><strong>响应时间</strong>： 从作业的释放时间到完成时间的时间长度</p><ul><li>相对时限：作业的最大允许响应时间</li><li>绝对时限：时限也称绝对时限=释放时间+相对时限</li></ul></li></ul><h3 id="强定时约束与弱定时约束"><a href="#强定时约束与弱定时约束" class="headerlink" title="强定时约束与弱定时约束"></a>强定时约束与弱定时约束</h3><h4 id="定时约束"><a href="#定时约束" class="headerlink" title="定时约束"></a>定时约束</h4><p><strong>定时约束</strong>： 对作业的定时行为所施加的约束。</p><p>分为两类：强实时约束与弱实时约束</p><p>最简单的定时约束：释放时间与相对或绝对时限来描述</p><ul><li><strong>强定时约束/强时限</strong>：施加情景：作业超过时限，产生的延迟结果灾难性</li><li><strong>弱定时约束/强时限</strong>：施加情景：延迟不造成严重后果（但延迟完成的弱时限作业累加后可能）</li></ul><h4 id="确定作业强弱性的方法"><a href="#确定作业强弱性的方法" class="headerlink" title="确定作业强弱性的方法"></a>确定作业强弱性的方法</h4><ol><li><p><strong>结果的有用性</strong>：</p><ul><li><p>是作业延缓大小的一个函数 – 度量作业相对于时限来说完成的有多晚。</p><ul><li><p>提前完成：作业延缓为0；</p><p>延迟完成：作业延缓=完成时间 - 作业时限</p></li><li><p>弱实时作业：延缓↑  执行结果的有用性：逐渐减少</p><p>强实时作业：延缓↑  执行结果的有用性：急剧下降甚至为负</p></li></ul></li><li><p>定量表述强弱时限的区别。</p><ul><li>有用性下降慢，时限更弱。</li><li>量化度量：定义强/弱实时的约束频谱。</li></ul></li><li><p>也表示了系统整体性能</p></li></ul></li><li><p><strong>必然或然表述</strong></p><ul><li>强时限：该作业一次也不能错过时限。</li><li>弱时限：可以接受延误低概率发生</li></ul></li><li><p><strong>时间服务质量保证</strong></p><p><strong>a.</strong> 验证：通过可证的正确、有效过程说明；或详尽的模拟/测试 说明。</p><p><strong>b.</strong> 本书大部分描述：</p><p>① 有效的<u>验证算法</u>和<u>方法</u>；</p><p>② 允许系统被如此验证的<u>调度策略</u>和<u>资源管理策略</u>；</p><p><strong>c.</strong> <strong>时间质量保证</strong>（guaranteed）：用户要求验证系统总能满足<u>定时约束</u></p><p>​    <strong>服务质量保证</strong>（best-effort）：不需要验证，或系统满足<u>统计约束</u></p></li></ol><h3 id="强实时系统"><a href="#强实时系统" class="headerlink" title="强实时系统"></a>强实时系统</h3><ul><li>完成有强时限要求的作业并无好处。</li><li>减小作业流的响应时间抖动有好处且关键。</li><li>经常会选择延缓强实时作业的开始和完成时间，以便把时间让给弱实时或后台作业。</li></ul><h3 id="弱实时系统"><a href="#弱实时系统" class="headerlink" title="弱实时系统"></a>弱实时系统</h3><ul><li>要求经常用概率词汇来描述。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《实时系统》笔记：第二章 强实时系统与弱实时系统&lt;/p&gt;
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="实时系统" scheme="https://gessiegulugulu.github.io/tags/%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android 项目架构</title>
    <link href="https://gessiegulugulu.github.io/2019/10/10/Android%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
    <id>https://gessiegulugulu.github.io/2019/10/10/Android项目架构/</id>
    <published>2019-10-10T04:51:12.000Z</published>
    <updated>2019-10-23T08:39:39.173Z</updated>
    
    <content type="html"><![CDATA[<p>Android 开发常用的三种架构：MVC MVP MVVM</p><a id="more"></a><h3 id="MVC-MVP-MVVM"><a href="#MVC-MVP-MVVM" class="headerlink" title="MVC MVP MVVM"></a>MVC MVP MVVM</h3><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><h4 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h4><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><h3 id="项目架构图"><a href="#项目架构图" class="headerlink" title="项目架构图"></a>项目架构图</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 开发常用的三种架构：MVC MVP MVVM&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android开发" scheme="https://gessiegulugulu.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="https://gessiegulugulu.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="项目架构" scheme="https://gessiegulugulu.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>FGPA板运行Linux系统</title>
    <link href="https://gessiegulugulu.github.io/2019/10/10/FGPA%E6%9D%BF%E8%BF%90%E8%A1%8CLinux%E7%B3%BB%E7%BB%9F/"/>
    <id>https://gessiegulugulu.github.io/2019/10/10/FGPA板运行Linux系统/</id>
    <published>2019-10-09T16:43:33.000Z</published>
    <updated>2019-10-11T12:21:51.096Z</updated>
    
    <content type="html"><![CDATA[<p>目标：在FGPA板上运行Linux系统即可</p><a id="more"></a><h3 id="配置电脑环境"><a href="#配置电脑环境" class="headerlink" title="配置电脑环境"></a>配置电脑环境</h3><p>安装串口和USB方面程序</p><p>新到的板子电子的味道有点好闻嗯。然后我还啥也没干</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目标：在FGPA板上运行Linux系统即可&lt;/p&gt;
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="嵌入式" scheme="https://gessiegulugulu.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="Linux" scheme="https://gessiegulugulu.github.io/tags/Linux/"/>
    
      <category term="FGPA" scheme="https://gessiegulugulu.github.io/tags/FGPA/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start</title>
    <link href="https://gessiegulugulu.github.io/2019/10/09/hello-world/"/>
    <id>https://gessiegulugulu.github.io/2019/10/09/hello-world/</id>
    <published>2019-10-09T06:00:29.280Z</published>
    <updated>2019-10-12T00:55:41.097Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome! This is my very first post using <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome! This is my very first post using &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
